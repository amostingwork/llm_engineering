from typing import List, Dict, Any
from datetime import datetime
import os


"""
Creates a markdown file from the relevant_articles variable.

Args:
    relevant_articles: List of article dictionaries with keys:
        - title: Article title
        - article_summary: AI-generated summary of the article
        - link: Article URL
        - relevance_score: Numeric score (0-10)
        - reason_for_relevance_score: Explanation for the relevance score
    filename: Optional custom filename. If None, generates timestamp-based name.

Returns:
    The filename of the created markdown file.
"""
def create_markdown_file(relevant_articles: List[Dict[str, Any]], filename: str = None) -> str:
    # Generate filename if not provided
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relevant_articles_{timestamp}.md"
    
    # Ensure filename has .md extension
    if not filename.endswith('.md'):
        filename += '.md'
    
    # Create markdown content
    markdown_content = []
    
    # Header
    markdown_content.append("# Relevant Tech Articles")
    markdown_content.append("")
    markdown_content.append(f"*Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")
    markdown_content.append("")
    markdown_content.append(f"**Total Articles:** {len(relevant_articles)}")
    markdown_content.append("")
    
    # Sort articles by relevance score (highest first)
    sorted_articles = sorted(relevant_articles, key=lambda x: x.get('relevance_score', 0), reverse=True)
    
    # Articles section
    markdown_content.append("## Articles")
    markdown_content.append("")
    
    for i, article in enumerate(sorted_articles, 1):
        title = article.get('title', 'Untitled')
        link = article.get('link', '')
        article_summary = article.get('article_summary', 'No summary available')
        reason_for_score = article.get('reason_for_relevance_score', 'No reason provided')
        score = article.get('relevance_score', 'N/A')
        
        markdown_content.append(f"### {i}. {title}")
        markdown_content.append("")
        
        if link:
            markdown_content.append(f"**Link:** [{link}]({link})")
            markdown_content.append("")
        
        markdown_content.append(f"**Relevance Score:** {score}/10")
        markdown_content.append("")
        
        markdown_content.append("**Article Summary:**")
        markdown_content.append("")
        markdown_content.append(f"{article_summary}")
        markdown_content.append("")
        
        markdown_content.append("**Reason for Relevance Score:**")
        markdown_content.append("")
        markdown_content.append(f"{reason_for_score}")
        markdown_content.append("")
        markdown_content.append("---")
        markdown_content.append("")
    
    # Footer
    markdown_content.append("")
    markdown_content.append("*This report was generated by the personalised newsfeed system.*")
    
    # Write to file
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(markdown_content))
        
        print(f"✅ Markdown file created: {filename}")
        return filename
        
    except Exception as e:
        print(f"❌ Error creating markdown file: {e}")
        return None

"""
Displays a summary of relevant articles in the console.

Args:
    relevant_articles: List of article dictionaries
"""
def display_articles_summary(relevant_articles: List[Dict[str, Any]]) -> None:
    if not relevant_articles:
        print("No relevant articles found.")
        return
    
    print(f"\n📋 Found {len(relevant_articles)} relevant articles:")
    print("=" * 60)
    
    # Sort by relevance score
    sorted_articles = sorted(relevant_articles, key=lambda x: x.get('relevance_score', 0), reverse=True)
    
    for i, article in enumerate(sorted_articles, 1):
        title = article.get('title', 'Untitled')
        score = article.get('relevance_score', 'N/A')
        link = article.get('link', '')
        
        print(f"\n{i}. {title}")
        print(f"   Score: {score}/10")
        if link:
            print(f"   Link: {link}")
